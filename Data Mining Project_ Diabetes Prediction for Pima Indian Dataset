{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"},"colab":{"name":"Data Mining Project: Diabetes Prediction for Pima Indian Dataset","provenance":[{"file_id":"1F_7YVG55YrNbHZA1tigc7FaYLa2uQFMa","timestamp":1635345913381}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"wZoEtPIRdBRi"},"source":["# Dataset #1 Pima Indian Type 1 Diabetes\n","\n","---\n","\n","\n","<b> SJN Group </b>\n"]},{"cell_type":"code","metadata":{"id":"hAHQCmqhdBRk","executionInfo":{"status":"ok","timestamp":1638474708063,"user_tz":300,"elapsed":148,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# Importing everything\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","#import the three models that we will use. logisitc regression, DTclassifier, AND SVC\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","#Need to import to get our score, split, and to implement stratified k fold. \n","from sklearn.model_selection import cross_val_score, train_test_split, StratifiedKFold \n","from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n","#Importing this to use in our outlier function\n","from collections import Counter\n","\n","# Read in our csv and label all of our columns\n","data = pd.read_csv('diabetes.csv') \n","data.columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness','Insulin', 'BMI', 'DPFunction', 'Age', 'Outcome'] "],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"9s6qnTXkyEbd","executionInfo":{"status":"ok","timestamp":1638474708064,"user_tz":300,"elapsed":15,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"e6ff3068-be9e-46a7-fdb3-d270554a7a55"},"source":["data.head() #since there are 0 values for insulin, will see change once we fill in the empty values and show the head again."],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DPFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pregnancies  Glucose  BloodPressure  ...  DPFunction  Age  Outcome\n","0            6      148             72  ...       0.627   50        1\n","1            1       85             66  ...       0.351   31        0\n","2            8      183             64  ...       0.672   32        1\n","3            1       89             66  ...       0.167   21        0\n","4            0      137             40  ...       2.288   33        1\n","\n","[5 rows x 9 columns]"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"md87pfcvwYYX","executionInfo":{"status":"ok","timestamp":1638474708064,"user_tz":300,"elapsed":13,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"8ae398cf-6aa4-47af-a351-c1ad937a1398"},"source":["data.info() #getting general information about our data"],"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 768 entries, 0 to 767\n","Data columns (total 9 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Pregnancies    768 non-null    int64  \n"," 1   Glucose        768 non-null    int64  \n"," 2   BloodPressure  768 non-null    int64  \n"," 3   SkinThickness  768 non-null    int64  \n"," 4   Insulin        768 non-null    int64  \n"," 5   BMI            768 non-null    float64\n"," 6   DPFunction     768 non-null    float64\n"," 7   Age            768 non-null    int64  \n"," 8   Outcome        768 non-null    int64  \n","dtypes: float64(2), int64(7)\n","memory usage: 54.1 KB\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"SDpD5MB1E7rU","executionInfo":{"status":"ok","timestamp":1638474708065,"user_tz":300,"elapsed":10,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"acde63b0-b249-46eb-c1d9-dc658251ff92"},"source":["data.describe() #getting statistical info about our dataset. More people are non-diabetic than diabetic, average age is 33, average BMI is 31. "],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DPFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.845052</td>\n","      <td>120.894531</td>\n","      <td>69.105469</td>\n","      <td>20.536458</td>\n","      <td>79.799479</td>\n","      <td>31.992578</td>\n","      <td>0.471876</td>\n","      <td>33.240885</td>\n","      <td>0.348958</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.369578</td>\n","      <td>31.972618</td>\n","      <td>19.355807</td>\n","      <td>15.952218</td>\n","      <td>115.244002</td>\n","      <td>7.884160</td>\n","      <td>0.331329</td>\n","      <td>11.760232</td>\n","      <td>0.476951</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.078000</td>\n","      <td>21.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>99.000000</td>\n","      <td>62.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>27.300000</td>\n","      <td>0.243750</td>\n","      <td>24.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","      <td>117.000000</td>\n","      <td>72.000000</td>\n","      <td>23.000000</td>\n","      <td>30.500000</td>\n","      <td>32.000000</td>\n","      <td>0.372500</td>\n","      <td>29.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.000000</td>\n","      <td>140.250000</td>\n","      <td>80.000000</td>\n","      <td>32.000000</td>\n","      <td>127.250000</td>\n","      <td>36.600000</td>\n","      <td>0.626250</td>\n","      <td>41.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>17.000000</td>\n","      <td>199.000000</td>\n","      <td>122.000000</td>\n","      <td>99.000000</td>\n","      <td>846.000000</td>\n","      <td>67.100000</td>\n","      <td>2.420000</td>\n","      <td>81.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Pregnancies     Glucose  ...         Age     Outcome\n","count   768.000000  768.000000  ...  768.000000  768.000000\n","mean      3.845052  120.894531  ...   33.240885    0.348958\n","std       3.369578   31.972618  ...   11.760232    0.476951\n","min       0.000000    0.000000  ...   21.000000    0.000000\n","25%       1.000000   99.000000  ...   24.000000    0.000000\n","50%       3.000000  117.000000  ...   29.000000    0.000000\n","75%       6.000000  140.250000  ...   41.000000    1.000000\n","max      17.000000  199.000000  ...   81.000000    1.000000\n","\n","[8 rows x 9 columns]"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"6uO21rNznOWQ","executionInfo":{"status":"ok","timestamp":1638474708179,"user_tz":300,"elapsed":122,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":[""],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1TZJOcqsFdsP","executionInfo":{"status":"ok","timestamp":1638474708179,"user_tz":300,"elapsed":7,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"f79623a4-a771-487d-de03-3bfb64157125"},"source":["data.isnull().sum() #Checking to see if there are any null values in our data"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pregnancies      0\n","Glucose          0\n","BloodPressure    0\n","SkinThickness    0\n","Insulin          0\n","BMI              0\n","DPFunction       0\n","Age              0\n","Outcome          0\n","dtype: int64"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"fpbY3kBGdBRm","executionInfo":{"status":"ok","timestamp":1638474708180,"user_tz":300,"elapsed":7,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# Correct the missing values for glucose by replacing 0 with the median glucose\n","data['Glucose'] = data['Glucose'].replace(0, data['Glucose'].median())\n","\n","#correct missing values in blood pressure with mean  \n","data['BloodPressure'] = data['BloodPressure'].replace(0, data['BloodPressure'].mean())\n","\n","# Correct missing bvalues for BMI with median\n","data['BMI'] = data['BMI'].replace(0, data['BMI'].median())\n","\n","# Correct missing values for skinthickness with median\n","data['SkinThickness'] = data['SkinThickness'].replace(0, data['SkinThickness'].median())\n","\n","# Correct missing values for insulin with median\n","data['Insulin'] = data['Insulin'].replace(0, data['Insulin'].median())"],"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CG-D8rmNII8H"},"source":["Filled out missing values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"rGq6Cnf_IP7L","executionInfo":{"status":"ok","timestamp":1638474708180,"user_tz":300,"elapsed":6,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"1dec9dbc-94de-48bb-8685-39819cb0ae42"},"source":["data.describe() # taking a look at our data, it will be slightly different than the original data set due to empty values being filled"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DPFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.845052</td>\n","      <td>121.656250</td>\n","      <td>72.254807</td>\n","      <td>27.334635</td>\n","      <td>94.652344</td>\n","      <td>32.450911</td>\n","      <td>0.471876</td>\n","      <td>33.240885</td>\n","      <td>0.348958</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.369578</td>\n","      <td>30.438286</td>\n","      <td>12.115932</td>\n","      <td>9.229014</td>\n","      <td>105.547598</td>\n","      <td>6.875366</td>\n","      <td>0.331329</td>\n","      <td>11.760232</td>\n","      <td>0.476951</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>44.000000</td>\n","      <td>24.000000</td>\n","      <td>7.000000</td>\n","      <td>14.000000</td>\n","      <td>18.200000</td>\n","      <td>0.078000</td>\n","      <td>21.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>99.750000</td>\n","      <td>64.000000</td>\n","      <td>23.000000</td>\n","      <td>30.500000</td>\n","      <td>27.500000</td>\n","      <td>0.243750</td>\n","      <td>24.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","      <td>117.000000</td>\n","      <td>72.000000</td>\n","      <td>23.000000</td>\n","      <td>31.250000</td>\n","      <td>32.000000</td>\n","      <td>0.372500</td>\n","      <td>29.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.000000</td>\n","      <td>140.250000</td>\n","      <td>80.000000</td>\n","      <td>32.000000</td>\n","      <td>127.250000</td>\n","      <td>36.600000</td>\n","      <td>0.626250</td>\n","      <td>41.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>17.000000</td>\n","      <td>199.000000</td>\n","      <td>122.000000</td>\n","      <td>99.000000</td>\n","      <td>846.000000</td>\n","      <td>67.100000</td>\n","      <td>2.420000</td>\n","      <td>81.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Pregnancies     Glucose  ...         Age     Outcome\n","count   768.000000  768.000000  ...  768.000000  768.000000\n","mean      3.845052  121.656250  ...   33.240885    0.348958\n","std       3.369578   30.438286  ...   11.760232    0.476951\n","min       0.000000   44.000000  ...   21.000000    0.000000\n","25%       1.000000   99.750000  ...   24.000000    0.000000\n","50%       3.000000  117.000000  ...   29.000000    0.000000\n","75%       6.000000  140.250000  ...   41.000000    1.000000\n","max      17.000000  199.000000  ...   81.000000    1.000000\n","\n","[8 rows x 9 columns]"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0P_WADqDyHsD","executionInfo":{"status":"ok","timestamp":1638474708180,"user_tz":300,"elapsed":6,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"86af2998-ccc8-4fe7-cf92-4ddab29b23bc"},"source":["data.head() #good example to see if our work, worked. Original data.head() there is three empty values for the first three insulin's, now there is the median."],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DPFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72.0</td>\n","      <td>35</td>\n","      <td>30.5</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66.0</td>\n","      <td>29</td>\n","      <td>30.5</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64.0</td>\n","      <td>23</td>\n","      <td>30.5</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66.0</td>\n","      <td>23</td>\n","      <td>94.0</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40.0</td>\n","      <td>35</td>\n","      <td>168.0</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pregnancies  Glucose  BloodPressure  ...  DPFunction  Age  Outcome\n","0            6      148           72.0  ...       0.627   50        1\n","1            1       85           66.0  ...       0.351   31        0\n","2            8      183           64.0  ...       0.672   32        1\n","3            1       89           66.0  ...       0.167   21        0\n","4            0      137           40.0  ...       2.288   33        1\n","\n","[5 rows x 9 columns]"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"WzT2RnFQs8kh","executionInfo":{"status":"ok","timestamp":1638474708426,"user_tz":300,"elapsed":251,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"0cbb8c5c-f386-4758-f2c3-811f6173b14f"},"source":["# Checking the number of negative Outcome's and positive Outcome's\n","sns.countplot('Outcome', data=data)"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f4688a4e6d0>"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":744},"id":"woYhDEesdBRp","executionInfo":{"status":"ok","timestamp":1638474709341,"user_tz":300,"elapsed":918,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"2b8dc622-882e-4f1b-f603-45765e3c7b78"},"source":["plt.figure(figsize=(12,10))\n","sns.heatmap(data.corr(), annot=True, fmt = \".2f\", cmap = \"RdBu\") #making a heatmap to see the importance of our features\n","\"\"\" data corr compute correlation, annot true (if false there are no values in the squares), fmt .2f is 2 floating decimals, cmap is mapping from data values to colorspace and we get to choose a nice colorscheme. I chose a diverging colorscheme\n","     because it is especially good at seeing smaller differences\n","\n","     This heatmap displays the most important features for the readers.\n","\n","     Most important two features are: Glucose at 0.49, and BMI at 0.31\n"," \"\"\""],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' data corr compute correlation, annot true (if false there are no values in the squares), fmt .2f is 2 floating decimals, cmap is mapping from data values to colorspace and we get to choose a nice colorscheme. I chose a diverging colorscheme\\n     because it is especially good at seeing smaller differences\\n\\n     This heatmap displays the most important features for the readers.\\n\\n     Most important two features are: Glucose at 0.49, and BMI at 0.31\\n '"]},"metadata":{},"execution_count":41},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x720 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":440},"id":"dmBigTFA_0ib","executionInfo":{"status":"ok","timestamp":1638474709719,"user_tz":300,"elapsed":383,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"6c345984-740f-42e8-fad9-d84a75dcfda6"},"source":["# Making a box plot to show everything, with this we can see how many outliers there are in our dataset. These must be removed.\n","\n","%matplotlib inline\n","data.boxplot(figsize=(20,10))"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f46889b4210>"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x720 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"UYlaSlxLTPif","executionInfo":{"status":"ok","timestamp":1638474709720,"user_tz":300,"elapsed":6,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# find show and delete the outliers\n","# need to find IQR, which is Q3 - Q1, which is where the outliers reside. \n","\n","def find_outliers(data, n, features): #taking in our data frame, n, and the feature columns\n","  outlierIndex = [] #will want to append to this so that we know where the indices are in our data, so that we can delete the outliers\n","\n","  # iterate over feature columns and find the data for q1 and q3 and store it in their variables. 25 for 25th precentile and 75 for 75th precentile which is Q1 and Q3\n","  for col in features:\n","    Q1 = np.percentile(data[col], 25)\n","    Q3 = np.percentile(data[col], 75)\n","    IQR = Q3 - Q1 #setting our IQR variable, which is Q3 - Q1\n","\n","    #After finding the interquartile range, we must multiple it by 1.5\n","    outlierStep = 1.5 * IQR\n","\n","    # Find the list of indices. This is done by subtracting the step from Q1, and then adding the step to Q3.\n","    # So we set the list to column data that is less than Q1 - outlier step and data that is greater than q3 + outlier step. And we take the index because we want the position,\n","    outlier_col_index = data[(data[col] < Q1 - outlierStep) | (data[col] > Q3 + outlierStep)].index\n","\n","    # Append all of the data that we gather in the previous step, to the outlier_indes list we made at the beginning\n","    outlierIndex.extend(outlier_col_index)\n","\n","  #Finally, we make the information we return\n","  # Set the index to the Counter of the list. What this will do is give us the element, with the number of times that it appears in the data next to it.\n","  # So, outlierIndex = ['blue', 'red', 'orange'] to ({'blue': 2, 'red': 3, \"yellow\": 1}) -> obviously won't have data that looks like that though.\n","  outlierIndex = Counter(outlierIndex)\n","  # \n","  variousOutliers = list( j for j, i in outlierIndex.items() if i > n )\n","\n","  # returning\n","  return variousOutliers\n","\n","#Put the found outliers inside of a variable. \n","outliersToDrop = find_outliers(data, 2, ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness','Insulin', 'BMI', 'DPFunction', 'Age','Outcome'])\n"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"LLTdKzKSYRuq","executionInfo":{"status":"ok","timestamp":1638474709720,"user_tz":300,"elapsed":6,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"0f6dbf2b-3c27-4eba-a52d-0c3d49ff9706"},"source":["# Locate all of the outliers to drop\n","data.loc[outliersToDrop]"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DPFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>177</th>\n","      <td>0</td>\n","      <td>129</td>\n","      <td>110.0</td>\n","      <td>46</td>\n","      <td>130.0</td>\n","      <td>67.1</td>\n","      <td>0.319</td>\n","      <td>26</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>3</td>\n","      <td>173</td>\n","      <td>82.0</td>\n","      <td>48</td>\n","      <td>465.0</td>\n","      <td>38.4</td>\n","      <td>2.137</td>\n","      <td>25</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>445</th>\n","      <td>0</td>\n","      <td>180</td>\n","      <td>78.0</td>\n","      <td>63</td>\n","      <td>14.0</td>\n","      <td>59.4</td>\n","      <td>2.420</td>\n","      <td>25</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Pregnancies  Glucose  BloodPressure  ...  DPFunction  Age  Outcome\n","177            0      129          110.0  ...       0.319   26        1\n","370            3      173           82.0  ...       2.137   25        1\n","445            0      180           78.0  ...       2.420   25        1\n","\n","[3 rows x 9 columns]"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"6e-tlTjgYlgd","executionInfo":{"status":"ok","timestamp":1638474709720,"user_tz":300,"elapsed":5,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# Locate the outliers, and drop them inplace.\n","data.drop(data.loc[outliersToDrop].index, inplace=True)"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"M6T0TABurFxe","executionInfo":{"status":"ok","timestamp":1638474709720,"user_tz":300,"elapsed":4,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["\"\"\"\n","Before we evaluate our models, we need to drop the outcome column. \n","We also need to make a training and testing split\n","\"\"\"\n","# Remove outcome column\n","X = data.drop([\"Outcome\"], axis = 1)\n","# Setting our outcome column to y\n","y = data[\"Outcome\"]\n","\n","\"\"\"\n","Make our variables for x training and testing and y training and testing\n","Set those variables equal to the importedd function train test split so we can get the split. The size is 0.2, and the random state is default of 42.\n","\"\"\"\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f7pGYvMkTwL6","executionInfo":{"status":"ok","timestamp":1638474709864,"user_tz":300,"elapsed":148,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"6411e00f-280c-45d5-86d8-96056be64737"},"source":["# SVC classification init, fit, and getting single score\n","\n","clfSvc = SVC()\n","clfSvc.fit(X_train, y_train)\n","clfSvc.score(X_test, y_test)\n"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7777777777777778"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AeAOeOPSWxT3","executionInfo":{"status":"ok","timestamp":1638474709865,"user_tz":300,"elapsed":12,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"4f36f2e4-af4c-4329-b2ec-e29dde60f5c6"},"source":["# DT classification init, fit, and getting single score\n","\n","clfDt = DecisionTreeClassifier()\n","clfDt.fit(X_train, y_train)\n","clfDt.score(X_test, y_test)"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6862745098039216"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yNoV7yxbW1fB","executionInfo":{"status":"ok","timestamp":1638474709866,"user_tz":300,"elapsed":10,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"e9f533fd-f0cc-452a-cadb-50b614b9b9fa"},"source":["# LR classification init, fit, and getting single score\n","\n","clfLr = LogisticRegression(n_jobs=10)\n","clfLr.fit(X_train, y_train)\n","clfLr.score(X_test, y_test)"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7908496732026143"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","metadata":{"id":"WDeWpjIfOAy7"},"source":["# Stratified cross validated score ran 10 times"]},{"cell_type":"code","metadata":{"id":"Z1Y85SZrJFuz","executionInfo":{"status":"ok","timestamp":1638474709866,"user_tz":300,"elapsed":6,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# Set skf to the stratifiedkfold and pass in the number of splits. We want this to be 10 fold so make it 10.\n","skf = StratifiedKFold(n_splits=10)"],"execution_count":50,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uev7nZZZ3Vx4","executionInfo":{"status":"ok","timestamp":1638474710010,"user_tz":300,"elapsed":149,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"df14c743-a067-4cd9-e5ba-9df4e1cfec3b"},"source":["# Split X and y of skf. \n","skf.split(X,y)"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<generator object _BaseKFold.split at 0x7f4688a42050>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"d0FqCjnjYGuO","executionInfo":{"status":"ok","timestamp":1638474710011,"user_tz":300,"elapsed":8,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# Gets the stratified cross validation 10 times of decision tree\n","\n","#Make our empty list to append our scores too\n","Dt_accuracy = []\n","\n","# Get the x y splits for the n splits of skf. \n","skf.get_n_splits(X, y)\n","\n","# Iterate through \n","for train_index, test_index in skf.split(X,y):\n","\n","  #print our values and set our variables to the proper information.\n","  #Uncomment print to see scores, but it is very long and makes the file much lengthier.\n","  #print(\"Train: \", train_index, \"Validation: \", test_index)\n","  newX_train = X.iloc[train_index]\n","  newX_test = X.iloc[test_index]\n","  newy_train = y.iloc[train_index]\n","  newy_test = y.iloc[test_index]\n"," \n","\n","  # fit our dt classifier to x1 train and y1 train\n","  clfDt.fit(newX_train, newy_train)\n","\n","  #predict with x1 test\n","  prediction = clfDt.predict(newX_test)\n","\n","  #score is the accuracy score of our prediction and y1 test\n","  score = accuracy_score(prediction, newy_test)\n","\n","  # append all of our scores\n","  Dt_accuracy.append(score)\n"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tGHvpgojY2EC","executionInfo":{"status":"ok","timestamp":1638474710012,"user_tz":300,"elapsed":8,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"b680a490-3606-4fbf-bfbe-3e49bde7d75e"},"source":["# Mean accuracy of decision tree skf 10 times!\n","\n","print(f\"Stratified cross validation with 10 folds mean accuracy:  {np.array(Dt_accuracy).mean()}\")\n","\n","# Mean accuracy percentage of decision tree skf 10 times!\n","\n","dtAccPercent = (np.array(Dt_accuracy).mean() * 100)\n","print(f\"Stratified cross validation with 10 folds mean accuracy percentage {dtAccPercent:.2f}%\")\n"],"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Stratified cross validation with 10 folds mean accuracy:  0.6759911141490089\n","Stratified cross validation with 10 folds mean accuracy percentage 67.60%\n"]}]},{"cell_type":"code","metadata":{"id":"QqMxJhC841vH","executionInfo":{"status":"ok","timestamp":1638474710254,"user_tz":300,"elapsed":246,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["Svc_accuracy = []\n","\n","skf.get_n_splits(X, y)\n","\n","for train_index, test_index in skf.split(X,y):\n","   #print(\"Train: \", train_index, \"Validation: \", test_index)\n","  newX_train = X.iloc[train_index]\n","  newX_test = X.iloc[test_index]\n","  newy_train = y.iloc[train_index]\n","  newy_test = y.iloc[test_index]\n","\n","  clfSvc.fit(newX_train, newy_train)\n","  prediction = clfDt.predict(newX_test)\n","  score = accuracy_score(prediction, newy_test)\n","  Svc_accuracy.append(score)"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8l2xgq6-47CI","executionInfo":{"status":"ok","timestamp":1638474710388,"user_tz":300,"elapsed":136,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"94c486c0-3bf0-4608-8db7-95f8d9049213"},"source":["print(f\"Stratified cross validation with 10 folds mean accuracy:  {np.array(Svc_accuracy).mean()}\")\n","svcAccPercent = (np.array(Svc_accuracy).mean() * 100)\n","print(f\"Stratified cross validation with 10 folds mean accuracy percentage {svcAccPercent:.2f}%\")"],"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Stratified cross validation with 10 folds mean accuracy:  0.9697368421052632\n","Stratified cross validation with 10 folds mean accuracy percentage 96.97%\n"]}]},{"cell_type":"code","metadata":{"id":"Q0MiLZKy5EtR","executionInfo":{"status":"ok","timestamp":1638474710684,"user_tz":300,"elapsed":298,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":["# This will get us all of our scores for Logistic Regression\n","\n","# Make empty list\n","\n","Lr_accuracy = []\n","\n","# Get the splits for X and y. \n","\n","skf.get_n_splits(X, y)\n","\n","# For our indexes in the skf.split x,y\n","for train_index, test_index in skf.split(X,y):\n","  #print(\"Train: \", train_index, \"Validation: \", test_index)\n","  newX_train = X.iloc[train_index]\n","  newX_test = X.iloc[test_index]\n","  newy_train = y.iloc[train_index]\n","  newy_test = y.iloc[test_index]\n","\n","\n","  # fit the logistic regression classifier to the x and y train\n","  clfLr.fit(newX_train, newy_train)\n","  # then predict it with the x1 test\n","  prediction = clfLr.predict(newX_test)\n","  # then set the score the the accuracy score with the prediction and y1 test variable\n","  score = accuracy_score(prediction, newy_test)\n","\n","  # then append all of the scores.\n","  Lr_accuracy.append(score)"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WYthLzaw5LoD","executionInfo":{"status":"ok","timestamp":1638474710827,"user_tz":300,"elapsed":148,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"e75e9ed5-e6f4-4328-9e58-56b8e35f2e62"},"source":["print(f\"Stratified cross validation with 10 folds mean accuracy:  {np.array(Lr_accuracy).mean()}\")\n","lrAccPercent = (np.array(Lr_accuracy).mean() * 100)\n","print(f\"Stratified cross validation with 10 folds mean accuracy percentage {lrAccPercent:.2f}%\")"],"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Stratified cross validation with 10 folds mean accuracy:  0.7726760082023241\n","Stratified cross validation with 10 folds mean accuracy percentage 77.27%\n"]}]},{"cell_type":"code","metadata":{"id":"r-6NG0dgr1xv","executionInfo":{"status":"ok","timestamp":1638474710827,"user_tz":300,"elapsed":13,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}}},"source":[""],"execution_count":57,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6hE_ZrWA5a63","executionInfo":{"status":"ok","timestamp":1638474710828,"user_tz":300,"elapsed":13,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"67a83706-73fc-4faa-9fac-5bcd78802f8e"},"source":["# precision, recall, f score for dt\n","yPredictions = clfDt.predict(X_test)\n","DtScores = classification_report(y_test, yPredictions)\n","\n","print(DtScores)"],"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.96      0.98       107\n","           1       0.92      1.00      0.96        46\n","\n","    accuracy                           0.97       153\n","   macro avg       0.96      0.98      0.97       153\n","weighted avg       0.98      0.97      0.97       153\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HHIj8lSQ5gHp","executionInfo":{"status":"ok","timestamp":1638474710829,"user_tz":300,"elapsed":11,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"767489d2-c40c-4df4-acb5-7769c20b9ecf"},"source":["# precision, recall, fscore for svc\n","yPredictions = clfSvc.predict(X_test)\n","SvcScores = classification_report(y_test, yPredictions)\n","\n","print(SvcScores)"],"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      0.92      0.86       107\n","           1       0.72      0.50      0.59        46\n","\n","    accuracy                           0.79       153\n","   macro avg       0.76      0.71      0.72       153\n","weighted avg       0.78      0.79      0.78       153\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ioTVUGJ5jGy","executionInfo":{"status":"ok","timestamp":1638474710829,"user_tz":300,"elapsed":8,"user":{"displayName":"Jake Leslie","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiCrp7lW-WMGdqCgXvweWGdwYYEVzSD5EjPBft3JQ=s64","userId":"16577160779030627143"}},"outputId":"96570f29-667f-4f57-f357-3243cf4b6b32"},"source":["# Precision, recall, fscore for lr\n","yPredictions = clfLr.predict(X_test)\n","\n","LogisticRegressionScores = classification_report(y_test, yPredictions)\n","print(LogisticRegressionScores)\n"],"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.85      0.91      0.88       107\n","           1       0.74      0.63      0.68        46\n","\n","    accuracy                           0.82       153\n","   macro avg       0.80      0.77      0.78       153\n","weighted avg       0.82      0.82      0.82       153\n","\n"]}]}]}